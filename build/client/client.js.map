{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@chesslib/core/build/ChessAI/BoardEvals.js","node_modules/@chesslib/core/build/ChessAI/ChessAI.js","node_modules/@chesslib/core/build/ChessAI/ChessAIWorker.js","node_modules/@chesslib/core/build/ChessAI/index.js","node_modules/@chesslib/core/build/Chess/Chessboard.js","node_modules/@chesslib/core/build/Chess/Events.js","node_modules/@chesslib/core/build/Chess/Piece.js","node_modules/@chesslib/core/build/Chess/Pieces/Bishop.js","node_modules/@chesslib/core/build/Chess/Pieces/King.js","node_modules/@chesslib/core/build/Chess/Pieces/Knight.js","node_modules/@chesslib/core/build/Chess/Pieces/Pawn.js","node_modules/@chesslib/core/build/Chess/Pieces/Queen.js","node_modules/@chesslib/core/build/Chess/Pieces/Rook.js","node_modules/@chesslib/core/build/Chess/Positions.js","node_modules/@chesslib/core/build/Chess/Square.js","node_modules/@chesslib/core/build/Chess/Utils.js","node_modules/@chesslib/core/build/Chess/index.js","node_modules/@chesslib/core/index.js","source/ChessAI/BoardEvals.ts","source/ChessAI/ChessAI.ts","source/ChessAI/ChessAIWorker.ts","source/ChessAI/index.ts","source/client.ts"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvxnhvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;;;;ACFA,sBAAsB,KAAK;IAEvB,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAC;AACnC,CAAC;AAAA,CAAC;AAES,QAAA,eAAe,GAAG;IAC5B,CAAC,EAAE;QACF,CAAC,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,CAAC;QACvD,CAAC,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,CAAC;QAC/C,CAAC,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,CAAC;QAC/C,CAAC,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,CAAC;QAC/C,CAAC,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,CAAC;QAC/C,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAG,GAAG,EAAG,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAG,GAAG,CAAC;QAC/C,CAAC,GAAG,EAAG,GAAG,EAAE,GAAG,EAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,CAAC;QAC/C,CAAC,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,CAAC;KAC/C;IAED,CAAC,EAAE;QACF,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;QAChD,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;QAChD,CAAC,CAAC,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAE,CAAC,GAAG,CAAC;QAChD,CAAC,CAAC,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAE,CAAC,GAAG,CAAC;QAChD,CAAC,CAAC,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAE,CAAC,GAAG,CAAC;QAChD,CAAC,CAAC,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAG,GAAG,EAAE,CAAC,GAAG,CAAC;QAChD,CAAC,CAAC,GAAG,EAAE,CAA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","file":"client.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction reverseArray(array) {\n    return array.slice().reverse();\n}\n;\nexports.boardEvalsWhite = {\n    P: [\n        [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],\n        [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0],\n        [1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0],\n        [0.5, 0.5, 1.0, 2.5, 2.5, 1.0, 0.5, 0.5],\n        [0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0],\n        [0.5, -0.5, -1.0, 0.0, 0.0, -1.0, -0.5, 0.5],\n        [0.5, 1.0, 1.0, -2.0, -2.0, 1.0, 1.0, 0.5],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n    ],\n    N: [\n        [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0],\n        [-4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0],\n        [-3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0],\n        [-3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0],\n        [-3.0, 0.0, 1.5, 2.0, 2.0, 1.5, 0.0, -3.0],\n        [-3.0, 0.5, 1.0, 1.5, 1.5, 1.0, 0.5, -3.0],\n        [-4.0, -2.0, 0.0, 0.5, 0.5, 0.0, -2.0, -4.0],\n        [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0]\n    ],\n    B: [\n        [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],\n        [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0],\n        [-1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0],\n        [-1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0],\n        [-1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, -1.0],\n        [-1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0],\n        [-1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0],\n        [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0]\n    ],\n    R: [\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5],\n        [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n        [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n        [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n        [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n        [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n        [0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0]\n    ],\n    Q: [\n        [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],\n        [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0],\n        [-1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0],\n        [-0.5, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5],\n        [0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5],\n        [-1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0],\n        [-1.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, -1.0],\n        [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0]\n    ],\n    K: [\n        [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n        [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n        [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n        [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n        [-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0],\n        [-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0],\n        [2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0],\n        [2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 3.0, 2.0]\n    ]\n};\nexports.boardEvalsBlack = {\n    P: reverseArray(exports.boardEvalsWhite.P),\n    N: reverseArray(exports.boardEvalsWhite.N),\n    B: reverseArray(exports.boardEvalsWhite.B),\n    R: reverseArray(exports.boardEvalsWhite.R),\n    Q: reverseArray(exports.boardEvalsWhite.Q),\n    K: reverseArray(exports.boardEvalsWhite.K),\n};\nexports.BoardEvaluations = [\n    exports.boardEvalsBlack,\n    exports.boardEvalsWhite,\n];\n\n//# sourceMappingURL=BoardEvals.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Chess_1 = require(\"../Chess\");\nvar BoardEvals_1 = require(\"./BoardEvals\");\nvar PIECE_VALUES = {\n    P: 10,\n    B: 30,\n    N: 30,\n    R: 50,\n    Q: 80,\n    K: 900,\n};\nvar ChessAI = /** @class */ (function () {\n    function ChessAI(chessboard, playingSide, playerCount) {\n        this.chessboard = null;\n        this.moves = [];\n        this.playingSide = 0;\n        this.playerCount = 2;\n        this.searchTime = 0;\n        this.chessboard = chessboard;\n        this.playingSide = playingSide;\n        this.playerCount = playerCount;\n    }\n    ChessAI.prototype.setBoard = function (chessboard) {\n        this.chessboard = chessboard;\n    };\n    ChessAI.prototype.loadBoard = function (positions) {\n        this.chessboard = Chess_1.Chessboard.fromPosition(positions);\n    };\n    ChessAI.prototype.doMove = function (move) {\n        if (!this.chessboard.doMove(move)) {\n            return false;\n        }\n        return true;\n    };\n    ChessAI.prototype.doMoveFEN = function (move) {\n        if (!this.chessboard.doMoveFEN(move)) {\n            return false;\n        }\n        return true;\n    };\n    ChessAI.prototype.makeMoves = function (searchDepth, amount) {\n        if (searchDepth === void 0) { searchDepth = 4; }\n        if (amount === void 0) { amount = 1; }\n        var bestMoves = this.getBestMoves(searchDepth, amount);\n        if (!bestMoves.length) {\n            return null;\n        }\n        for (var _i = 0, bestMoves_1 = bestMoves; _i < bestMoves_1.length; _i++) {\n            var bestMove = bestMoves_1[_i];\n            this.doMove(bestMove);\n        }\n        return bestMoves;\n    };\n    ChessAI.prototype.getBestMove = function (side, searchDepth) {\n        var bestMoves = this.getBestMoves(searchDepth);\n        if (!bestMoves.length) {\n            return this.getRandomMove();\n        }\n        // var bestMove = null;\n        // var bestValue = -9999;\n        // if(move.score > bestValue)\n        // {\n        // \tbestMove = move;\n        // \tbestValue = move.score;\n        // }\n        return bestMoves[0];\n    };\n    ChessAI.prototype.getBestMoves = function (searchDepth, limit) {\n        if (limit === void 0) { limit = 5; }\n        this.searchTime = Date.now() + 100;\n        var moves = this.chessboard.getMovesFEN(this.playingSide);\n        for (var _i = 0, moves_1 = moves; _i < moves_1.length; _i++) {\n            var move = moves_1[_i];\n            this.chessboard.moveFEN(move.from, move.to);\n            // Do not allow the king to be killed?\n            move.score = this.evaluateBestMove(this.playingSide, searchDepth - 1, -10000, 10000, false);\n            this.chessboard.undo();\n        }\n        return moves.sort(function (a, b) {\n            if (a.score < b.score)\n                return 1;\n            if (a.score > b.score)\n                return -1;\n            return 0;\n        }).slice(0, limit);\n    };\n    ChessAI.prototype.getNextPlayerSide = function (playerSide) {\n        return (playerSide + 1) % this.playerCount;\n    };\n    ChessAI.prototype.evaluateBestMove = function (playerSide, depth, alpha, beta, isMaximisingPlayer) {\n        if (depth === 0) {\n            return this.evaluateBoard(this.playingSide);\n        }\n        var currentPlayer = this.getNextPlayerSide(playerSide);\n        var moves = this.chessboard.getMoves(currentPlayer);\n        if (isMaximisingPlayer) {\n            var bestValue = -9999;\n            for (var _i = 0, moves_2 = moves; _i < moves_2.length; _i++) {\n                var move = moves_2[_i];\n                this.chessboard.move(move.from, move.to);\n                bestValue = Math.max(bestValue, this.evaluateBestMove(currentPlayer, depth - 1, alpha, beta, !isMaximisingPlayer));\n                this.chessboard.undo();\n                alpha = Math.max(alpha, bestValue);\n                if (beta <= alpha) {\n                    return bestValue;\n                }\n            }\n            return bestValue;\n        }\n        else {\n            var bestValue = 9999;\n            for (var _a = 0, moves_3 = moves; _a < moves_3.length; _a++) {\n                var move = moves_3[_a];\n                this.chessboard.move(move.from, move.to);\n                bestValue = Math.min(bestValue, this.evaluateBestMove(currentPlayer, depth - 1, alpha, beta, !isMaximisingPlayer));\n                this.chessboard.undo();\n                beta = Math.min(beta, bestValue);\n                if (beta <= alpha) {\n                    return bestValue;\n                }\n            }\n            return bestValue;\n        }\n    };\n    ChessAI.prototype.getRandomMove = function () {\n        var moves = this.chessboard.getMovesFEN(this.playingSide);\n        if (!moves.length)\n            return null;\n        var randMove = moves[Math.floor(Math.random() * moves.length)];\n        randMove.score = 0;\n        return randMove;\n    };\n    ChessAI.prototype.evaluateBoard = function (side) {\n        var boardValue = 0;\n        this.chessboard.forEachPiece(function (piece) {\n            if (side == piece.color) {\n                boardValue += PIECE_VALUES[piece.type] + BoardEvals_1.BoardEvaluations[piece.color][piece.type][piece.square.y][piece.square.x];\n            }\n            else {\n                boardValue -= PIECE_VALUES[piece.type] + BoardEvals_1.BoardEvaluations[piece.color][piece.type][piece.square.y][piece.square.x];\n            }\n        });\n        return boardValue;\n    };\n    return ChessAI;\n}());\nexports.ChessAI = ChessAI;\n;\n\n//# sourceMappingURL=ChessAI.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ChessAIWorker = /** @class */ (function () {\n    function ChessAIWorker(workerPath) {\n        var _this = this;\n        this.worker = null;\n        this.listeners = [];\n        this.worker = new Worker(workerPath);\n        this.worker.onmessage = function (message) {\n            if (_this.listeners[message.data.event]) {\n                for (var _i = 0, _a = _this.listeners[message.data.event]; _i < _a.length; _i++) {\n                    var event = _a[_i];\n                    event.apply(event, message.data.arguments);\n                }\n            }\n        };\n    }\n    ChessAIWorker.prototype.emit = function (event, data) {\n        this.worker.postMessage(event);\n    };\n    ChessAIWorker.prototype.on = function (type, callback) {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(callback);\n    };\n    ChessAIWorker.prototype.exec = function (method) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        this.worker.postMessage({\n            method: method,\n            arguments: Array.prototype.slice.call(arguments).slice(1)\n        });\n    };\n    ChessAIWorker.prototype.destroy = function () {\n        this.worker.terminate();\n    };\n    return ChessAIWorker;\n}());\nexports.ChessAIWorker = ChessAIWorker;\n;\n\n//# sourceMappingURL=ChessAIWorker.js.map\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./ChessAI\"));\n__export(require(\"./ChessAIWorker\"));\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Square_1 = require(\"./Square\");\nvar Piece_1 = require(\"./Piece\");\n// Pieces\nvar Pawn_1 = require(\"./Pieces/Pawn\");\nvar Bishop_1 = require(\"./Pieces/Bishop\");\nvar Knight_1 = require(\"./Pieces/Knight\");\nvar Rook_1 = require(\"./Pieces/Rook\");\nvar Queen_1 = require(\"./Pieces/Queen\");\nvar King_1 = require(\"./Pieces/King\");\n// Third Party\nvar Utils_1 = require(\"./Utils\");\nvar Chessboard = /** @class */ (function () {\n    function Chessboard(sizeX, sizeY) {\n        if (sizeX === void 0) { sizeX = 8; }\n        if (sizeY === void 0) { sizeY = 8; }\n        this.boardSize = {\n            x: 8,\n            y: 8,\n        };\n        this.history = [];\n        this.squares = new Array();\n        this.onPromote = new Utils_1.ChessEventEmitter();\n        this.boardSize.x = sizeX;\n        this.boardSize.y = sizeY;\n        this.reset();\n    }\n    Chessboard.fromPosition = function (position) {\n        var sizeY = position.length;\n        var sizeX = position[0].length;\n        var board = new Chessboard(sizeX, sizeY);\n        board.loadPositions(position);\n        return board;\n    };\n    Chessboard.prototype.clone = function () {\n        return Chessboard.fromPosition(this.savePositions());\n    };\n    Chessboard.prototype.reset = function () {\n        this.squares = new Array();\n        for (var y = 0; y < this.boardSize.y; ++y) {\n            this.squares[y] = new Array();\n            for (var x = 0; x < this.boardSize.x; ++x) {\n                this.squares[y][x] = new Square_1.Square(this, x, y);\n            }\n        }\n        this.history = [];\n    };\n    Chessboard.prototype.forEach = function (callback) {\n        for (var y = 0; y < this.boardSize.y; ++y) {\n            for (var x = 0; x < this.boardSize.x; ++x) {\n                callback(this.squares[y][x], x, y);\n            }\n        }\n    };\n    Chessboard.prototype.forEachPiece = function (callback) {\n        this.forEach(function (square, x, y) {\n            if (square.piece) {\n                callback(square.piece, x, y, square);\n            }\n        });\n    };\n    Chessboard.prototype.findPieces = function (pieceType, color) {\n        if (pieceType === void 0) { pieceType = null; }\n        if (color === void 0) { color = null; }\n        var pieces = [];\n        this.forEachPiece(function (piece) {\n            if (pieceType && piece.type != pieceType)\n                return;\n            if (color && piece.color != color)\n                return;\n            pieces.push(piece);\n        });\n        return pieces;\n    };\n    Chessboard.prototype.map = function (callback) {\n        var newSquares = new Array();\n        for (var y = 0; y < this.boardSize.y; ++y) {\n            newSquares[y] = new Array();\n            for (var x = 0; x < this.boardSize.x; ++x) {\n                newSquares[y][x] = callback(this.squares[y][x], x, y);\n            }\n        }\n        return newSquares;\n    };\n    Chessboard.prototype.loadPositions = function (positions) {\n        this.reset();\n        if (positions.length > this.boardSize.y || positions[0].length > this.boardSize.x) {\n            return false;\n        }\n        for (var y = 0; y < positions.length; ++y) {\n            for (var x = 0; x < positions[y].length; ++x) {\n                var square = this.getSquare(x, y);\n                this.setSquare(square, positions[y][x][1], Piece_1.COLORS.getColor(positions[y][x][0]));\n            }\n        }\n        return true;\n    };\n    Chessboard.prototype.savePositions = function () {\n        var positions = [];\n        for (var y = 0; y < this.boardSize.y; ++y) {\n            positions[y] = [];\n            for (var x = 0; x < this.boardSize.x; ++x) {\n                if (this.squares[y][x].piece) {\n                    positions[y][x] = Piece_1.COLORS.getName(this.squares[y][x].piece.color) + this.squares[y][x].piece.type;\n                }\n                else {\n                    positions[y][x] = \"\";\n                }\n            }\n        }\n        return positions;\n    };\n    Chessboard.prototype.setBoard = function (board) {\n        this.reset();\n        var keys = Object.keys(board);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            var square = this.FENToSquare(key);\n            if (!square)\n                return;\n            var color = board[key][0];\n            var piece = board[key][1];\n            this.setSquare(square, piece, Piece_1.COLORS.getColor(color));\n        }\n    };\n    Chessboard.prototype.getBoard = function () {\n        var _this = this;\n        var positions = {};\n        this.forEach(function (square) {\n            if (square.piece) {\n                positions[_this.SquareToFEN(square)] = square.piece.getSymbol();\n            }\n        });\n        return positions;\n    };\n    Chessboard.prototype.getSquare = function (x, y) {\n        if (x >= (this.boardSize.x) || x < 0 || y >= (this.boardSize.y) || y < 0)\n            return null;\n        return this.squares[y][x];\n    };\n    Chessboard.prototype.setSquare = function (square, type, color) {\n        if (!square)\n            return null;\n        if (!type)\n            return this.clearSquare(square);\n        if (!Chessboard.PIECES[type])\n            return null;\n        return this.createPiece(type, color, square);\n    };\n    Chessboard.prototype.createPiece = function (type, color, square) {\n        var newPiece = new Chessboard.PIECES[type](this, square);\n        newPiece.setColor(color);\n        newPiece.initialize();\n        return newPiece;\n    };\n    Chessboard.prototype.setPiece = function (square, piece) {\n        if (!square)\n            return false;\n        // Remove the old piece from the square\n        if (square.piece) {\n            square.piece.square = null;\n        }\n        // Set the new piece\n        square.piece = piece;\n        if (piece) {\n            piece.square = square;\n        }\n        return true;\n    };\n    Chessboard.prototype.clearSquare = function (square) {\n        if (square.piece) {\n            square.piece.setSquare(null);\n            square.setPiece(null);\n        }\n    };\n    Chessboard.prototype.isValidMoveFEN = function (from, to) {\n        var fromSquare = this.FENToSquare(from);\n        var toSquare = this.FENToSquare(to);\n        return this.isValidMove(fromSquare, toSquare);\n    };\n    Chessboard.prototype.isValidMove = function (from, to) {\n        if (!from || !to)\n            return false;\n        if (!from.piece)\n            return false;\n        return !!this.getAllowedMovesOf(from.piece).find(function (move) {\n            if (from == move.from && to == move.to)\n                return true;\n            return false;\n        });\n    };\n    Chessboard.prototype.doMove = function (move) {\n        this.move(move.from, move.to);\n    };\n    Chessboard.prototype.doMoveFEN = function (move) {\n        this.tryMoveFEN(move.from, move.to);\n    };\n    Chessboard.prototype.move = function (from, to, simulatedMove) {\n        if (simulatedMove === void 0) { simulatedMove = false; }\n        if (!from || !to)\n            return false;\n        if (!from.piece)\n            return false;\n        var movingPiece = from.piece;\n        // Add the move to the history\n        this.history.push([]);\n        // this.forEachPiece( piece => {\n        // \tpiece.BeforePieceMoved(movingPiece, to);\n        // });\n        var result = movingPiece.move(to);\n        // this.forEachPiece( piece => {\n        // \tpiece.AfterPieceMoved(movingPiece, to);\n        // });\n        return result;\n    };\n    Chessboard.prototype.addHistory = function (piece, data) {\n        var history = {\n            piece: piece,\n            data: data,\n        };\n        this.history[this.history.length - 1].push(history);\n    };\n    // pushHistory(piece, data)\n    // {\n    // \tvar historyEvent = {\n    // \t\tpiece: piece,\n    // \t\ttype: type,\n    // \t\tdata: data,\n    // \t};\n    // \tthis.history[this.history.length - 1].push(historyEvent);\n    // }\n    // popHistory()\n    // {\n    // \tvar history = this.history.pop()\n    // \thistory.piece.undo(history.data);\n    // \treturn history;\n    // }\n    // newHistory()\n    // {\n    // \tthis.history.push([]);\n    // }\n    // Undo the last actions.\n    Chessboard.prototype.undo = function () {\n        var history = this.history.pop();\n        if (!history) {\n            return null;\n        }\n        var historySize = history.length;\n        for (var i = 0; i < historySize; ++i) {\n            var event = history.pop();\n            event.piece.undo(event.data);\n        }\n        return history;\n    };\n    Chessboard.prototype.moveFEN = function (from, to, simulatedMove) {\n        if (simulatedMove === void 0) { simulatedMove = false; }\n        var fromSquare = this.FENToSquare(from);\n        var toSquare = this.FENToSquare(to);\n        return this.move(fromSquare, toSquare, simulatedMove);\n    };\n    Chessboard.prototype.tryMove = function (from, to, simulatedMove) {\n        if (simulatedMove === void 0) { simulatedMove = false; }\n        if (!this.isValidMove(from, to))\n            return false;\n        return this.move(from, to, simulatedMove);\n    };\n    Chessboard.prototype.tryMoveFEN = function (from, to, simulatedMove) {\n        if (simulatedMove === void 0) { simulatedMove = false; }\n        var fromSquare = this.FENToSquare(from);\n        var toSquare = this.FENToSquare(to);\n        if (!this.isValidMove(fromSquare, toSquare)) {\n            return false;\n        }\n        return this.move(fromSquare, toSquare, simulatedMove);\n    };\n    Chessboard.prototype.getAllowedMovesOf = function (piece) {\n        return piece.getAllowedMoves().map(function (toSquare) {\n            return {\n                from: piece.square,\n                to: toSquare,\n            };\n        });\n    };\n    Chessboard.prototype.getMovesOf = function (piece) {\n        return piece.getLegalMoves().map(function (toSquare) {\n            return {\n                from: piece.square,\n                to: toSquare,\n            };\n        });\n    };\n    Chessboard.prototype.getMovesAtFEN = function (fen) {\n        var square = this.FENToSquare(fen);\n        if (square && square.piece) {\n            return this.getAllowedMovesOf(square.piece);\n        }\n        return [];\n    };\n    Chessboard.prototype.getFENMovesatFEN = function (fen) {\n        var _this = this;\n        return this.getMovesAtFEN(fen).map(function (move) {\n            move.from = _this.PositionToFEN(move.from.x, move.from.y);\n            move.to = _this.PositionToFEN(move.to.x, move.to.y);\n            return move;\n        });\n    };\n    Chessboard.prototype.getMoves = function (color) {\n        var _this = this;\n        if (color === void 0) { color = null; }\n        var moves = [];\n        this.forEachPiece(function (piece) {\n            if (color !== null && color != piece.color) {\n                //console.log(\"not same color?\");\n                return;\n            }\n            moves.push.apply(moves, _this.getAllowedMovesOf(piece));\n        });\n        return moves;\n    };\n    Chessboard.prototype.getMovesFEN = function (color) {\n        var _this = this;\n        if (color === void 0) { color = null; }\n        return this.getMoves(color).map(function (move) {\n            move.from = _this.PositionToFEN(move.from.x, move.from.y);\n            move.to = _this.PositionToFEN(move.to.x, move.to.y);\n            return move;\n        });\n    };\n    Chessboard.prototype.PositionToFEN = function (x, y) {\n        return this.charIndex(x) + (this.boardSize.y - y);\n    };\n    Chessboard.prototype.FENtoPosition = function (fen) {\n        return {\n            x: this.indexOfChar(fen[0]),\n            y: (this.boardSize.y - fen[1])\n        };\n    };\n    Chessboard.prototype.FENToSquare = function (fen) {\n        var position = this.FENtoPosition(fen);\n        return this.getSquare(position.x, position.y);\n    };\n    Chessboard.prototype.SquareToFEN = function (square) {\n        var position = square.getPosition();\n        return this.PositionToFEN(position.x, position.y);\n    };\n    Chessboard.prototype.charIndex = function (index) {\n        return Chessboard.SIDE[index];\n    };\n    Chessboard.prototype.indexOfChar = function (char) {\n        return Chessboard.SIDE.indexOf(char);\n    };\n    Chessboard.prototype.clearDebug = function () {\n        this.forEach(function (square) {\n            square.debug = false;\n        });\n    };\n    Chessboard.prototype.debugSquare = function (square, debugColor) {\n        square.debug = debugColor;\n    };\n    Chessboard.prototype.debugFEN = function (fen, debugColor) {\n        var square = this.FENToSquare(fen);\n        if (square) {\n            square.debug = debugColor;\n        }\n    };\n    Chessboard.prototype.debugMoves = function (fen, debugColor) {\n        var square = this.FENToSquare(fen);\n        if (square && square.piece) {\n            var piece = square.getPiece();\n            var moves = piece.getLegalMoves();\n            moves.forEach(function (square) {\n                square.debug = debugColor;\n            });\n            return true;\n        }\n        return false;\n    };\n    Chessboard.SIDE = \"abcdefghijklmnopqrstuvwxyz\";\n    Chessboard.RANKS = [\"Pawn\", \"Knight\", \"Bishop\", \"Rook\", \"Queen\", \"King\"];\n    Chessboard.PIECES = {\n        P: Pawn_1.PawnPiece,\n        B: Bishop_1.BishopPiece,\n        N: Knight_1.KnightPiece,\n        R: Rook_1.RookPiece,\n        Q: Queen_1.QueenPiece,\n        K: King_1.KingPiece,\n    };\n    return Chessboard;\n}());\nexports.Chessboard = Chessboard;\n;\n\n//# sourceMappingURL=Chessboard.js.map\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Utils_1 = require(\"./Utils\");\nvar ChessMoveEvent = /** @class */ (function (_super) {\n    __extends(ChessMoveEvent, _super);\n    function ChessMoveEvent(from, to) {\n        var _this = _super.call(this) || this;\n        _this.from = null;\n        _this.to = null;\n        _this.from = from;\n        _this.to = to;\n        return _this;\n    }\n    return ChessMoveEvent;\n}(Utils_1.ChessEvent));\nexports.ChessMoveEvent = ChessMoveEvent;\n;\nvar ChessPromoteEvent = /** @class */ (function (_super) {\n    __extends(ChessPromoteEvent, _super);\n    function ChessPromoteEvent(square, piece, fen) {\n        var _this = _super.call(this) || this;\n        _this.fen = null;\n        _this.piece = null;\n        _this.square = null;\n        _this.fen = fen;\n        _this.piece = piece;\n        _this.square = square;\n        return _this;\n    }\n    return ChessPromoteEvent;\n}(Utils_1.ChessEvent));\nexports.ChessPromoteEvent = ChessPromoteEvent;\n;\n\n//# sourceMappingURL=Events.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Define Movement Vectors\nvar MovementVectors = /** @class */ (function () {\n    function MovementVectors() {\n    }\n    MovementVectors.Diagonal = [[1, 1], [1, -1], [-1, -1], [-1, 1]];\n    MovementVectors.Lateral = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n    MovementVectors.Omni = MovementVectors.Diagonal.concat(MovementVectors.Lateral);\n    return MovementVectors;\n}());\nexports.MovementVectors = MovementVectors;\n;\nvar COLORS = /** @class */ (function () {\n    function COLORS() {\n    }\n    COLORS.getColor = function (color) {\n        return COLORMAP[color];\n    };\n    COLORS.getName = function (color) {\n        var keys = Object.keys(COLORMAP);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            if (COLORMAP[key] == color)\n                return key;\n        }\n        return \"\";\n    };\n    COLORS.BLACK = 0;\n    COLORS.WHITE = 1;\n    COLORS.GREEN = 2;\n    COLORS.ORANGE = 3;\n    return COLORS;\n}());\nexports.COLORS = COLORS;\n;\nvar COLORMAP = {\n    w: COLORS.WHITE,\n    b: COLORS.BLACK,\n    g: COLORS.GREEN,\n    o: COLORS.ORANGE\n};\n// Simploe Piece inmplementation\nvar Piece = /** @class */ (function () {\n    function Piece(board, square) {\n        // Board & Square \n        this.board = null;\n        this.square = null;\n        // Piece description\n        this.name = \"Piece\";\n        this.color = null;\n        this.type = null;\n        // Movement information\n        this.moves = 0;\n        this.index = null;\n        this.pieceTimer = null;\n        this.moveDelay = 5000;\n        this.lastMoved = 0;\n        this.board = board;\n        this.setSquare(square);\n    }\n    Piece.prototype.initialize = function () {\n        // Not implemented\n    };\n    Piece.prototype.setSquare = function (square) {\n        if (this.square) {\n            this.square.piece = null;\n        }\n        if (square) {\n            square.piece = this;\n        }\n        this.square = square;\n    };\n    Piece.prototype.setColor = function (color) {\n        this.color = color;\n    };\n    Piece.prototype.getColor = function () {\n        return this.color;\n    };\n    // Moves piece to a new square\n    Piece.prototype.move = function (square) {\n        if (!square)\n            return false;\n        // If square has piece capture it.\n        this.capture(square);\n        this.addHistory({\n            move: {\n                from: this.square,\n                to: square,\n            },\n            lastMoved: this.lastMoved\n        });\n        // Change positions\n        this.moves++;\n        // Clear previous square\n        this.square.setPiece(null);\n        // set new position\n        this.setSquare(square);\n        this.lastMoved = Date.now();\n        return true;\n    };\n    Piece.prototype.undo = function (event) {\n        if (event.move) {\n            this.square.setPiece(null);\n            this.setSquare(event.move.from);\n            this.lastMoved = event.lastMoved;\n            this.moves--;\n        }\n        if (event.captured) {\n            event.square.setPiece(event.captured);\n        }\n    };\n    Piece.prototype.capture = function (square) {\n        if (!square)\n            return;\n        if (square.piece) {\n            // Add capture to the history\n            this.addHistory({\n                captured: square.piece,\n                square: square,\n            });\n        }\n        square.setPiece(null);\n    };\n    Piece.prototype.getAllowedMoves = function () {\n        if (this.lastMoved > Date.now() - this.moveDelay)\n            return [];\n        return this.getLegalMoves();\n    };\n    Piece.prototype.getLegalMoves = function () {\n        var _this = this;\n        return this.getMoves().filter(function (square) {\n            if (square.piece && square.piece.color == _this.color)\n                return false;\n            return true;\n        });\n    };\n    Piece.prototype.getMoves = function () {\n        throw new Error(\"Not implemented\");\n    };\n    Piece.prototype.getMovesByVectors = function (vectors, limit) {\n        if (limit === void 0) { limit = undefined; }\n        var moves = [], steps, vector, square;\n        for (var i = 0, l = vectors.length; i < l; i++) {\n            steps = 0;\n            vector = vectors[i];\n            square = this.square;\n            // Add all squares in path\n            while (square = square.getSibling(vector[0], vector[1])) {\n                if (square.getPiece()) {\n                    // Square is occupied by opponent\n                    if (square.getPiece().color != this.color) {\n                        // Occupied by other player - piece can be captured\n                        moves.push(square);\n                    }\n                    break;\n                }\n                moves.push(square);\n                steps++;\n                // Check if steps limit exceeded\n                if (limit && steps >= limit)\n                    break;\n            }\n        }\n        return moves;\n    };\n    Piece.prototype.getSymbol = function () {\n        return COLORS.getName(this.color) + this.type;\n    };\n    Piece.prototype.BeforePieceMoved = function (piece, square) {\n        // Not implemented\n    };\n    Piece.prototype.AfterPieceMoved = function (piece, square) {\n        // Not implemented\n    };\n    Piece.prototype.addHistory = function (data) {\n        this.board.addHistory(this, data);\n    };\n    return Piece;\n}());\nexports.Piece = Piece;\n;\n\n//# sourceMappingURL=Piece.js.map\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Piece_1 = require(\"../Piece\");\nvar BishopPiece = /** @class */ (function (_super) {\n    __extends(BishopPiece, _super);\n    function BishopPiece() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.name = \"Bishop\";\n        _this.type = \"B\";\n        return _this;\n    }\n    BishopPiece.prototype.getMoves = function () {\n        return this.getMovesByVectors(Piece_1.MovementVectors.Diagonal);\n    };\n    return BishopPiece;\n}(Piece_1.Piece));\nexports.BishopPiece = BishopPiece;\n;\n\n//# sourceMappingURL=Bishop.js.map\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Piece_1 = require(\"../Piece\");\nvar KingPiece = /** @class */ (function (_super) {\n    __extends(KingPiece, _super);\n    function KingPiece() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.name = \"King\";\n        _this.type = \"K\";\n        return _this;\n        // setCastling(from, to, castledFrom, castledTo)\n        // {\n        // \tthis.castling = {\n        // \t\tcastlingfrom: from,\n        // \t\tcastlingTo: to,\n        // \t\tcastledPiece: this,\n        // \t\tcastledFrom: castledFrom,\n        // \t\tcastledTo: castledTo,\n        // \t};\n        // }\n    }\n    KingPiece.prototype.move = function (square) {\n        if (Math.abs(square.getPosition().x - this.square.getPosition().x) > 1) {\n            // Castle Left rook\n            if (square.getPosition().x - this.square.getPosition().x < 0) {\n                return this.castle(-4, -1, -2);\n            }\n            // Castle Right rook\n            if (square.getPosition().x - this.square.getPosition().x > 0) {\n                return this.castle(3, 1, 2);\n            }\n        }\n        if (!_super.prototype.move.call(this, square))\n            return false;\n        return true;\n    };\n    KingPiece.prototype.getMoves = function () {\n        return this.getCastlingMoves([[-1, 0, 4], [1, 0, 3]], 2, 'R');\n    };\n    KingPiece.prototype.getCastlingMoves = function (vectors, distance, castlingPieceType) {\n        var moves = this.getMovesByVectors(Piece_1.MovementVectors.Omni, 1);\n        if (this.moves > 0)\n            return moves;\n        var steps, vector, square;\n        for (var i = 0, l = vectors.length; i < l; i++) {\n            steps = 0;\n            vector = vectors[i];\n            square = this.square;\n            // Check if the castling piece is available\n            var castlingTarget = this.square.getSibling(vector[0] * vector[2], vector[1] * vector[2]);\n            if (castlingTarget && castlingTarget.piece && castlingTarget.piece.type == castlingPieceType && castlingTarget.piece.color == this.color && castlingTarget.piece.moves == 0) {\n                // Add all squares in path\n                while (square = square.getSibling(vector[0], vector[1])) {\n                    // Square is occupied\n                    if (square.getPiece()) {\n                        break;\n                    }\n                    moves.push(square);\n                    steps++;\n                    // Check if steps limit exceeded\n                    if (distance && steps >= distance)\n                        break;\n                }\n            }\n        }\n        return moves;\n    };\n    KingPiece.prototype.castle = function (rookPosition, kingPosition, castlePosition) {\n        var rookSquare = this.square.getSibling(rookPosition, 0);\n        var kingSquare = this.square.getSibling(kingPosition, 0);\n        var castlingSquare = this.square.getSibling(castlePosition, 0);\n        // this.addHistory({\n        // \tcastling: {\n        // \t\trookSquare: rookSquare,\n        // \t\tkingSquare: kingSquare,\n        // \t\tcastlingSquare: castlingSquare,\n        // \t},\n        // \tcastling: this.canCastle,\n        // });\n        //this.setCastling(rookSquare, kingSquare, current, castlingSquare);\n        rookSquare.piece.move(kingSquare);\n        return _super.prototype.move.call(this, castlingSquare);\n    };\n    return KingPiece;\n}(Piece_1.Piece));\nexports.KingPiece = KingPiece;\n;\n\n//# sourceMappingURL=King.js.map\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Piece_1 = require(\"../Piece\");\nvar KnightPiece = /** @class */ (function (_super) {\n    __extends(KnightPiece, _super);\n    function KnightPiece() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.name = \"Knight\";\n        _this.type = \"N\";\n        return _this;\n    }\n    KnightPiece.prototype.getMoves = function () {\n        return this.getMovesByVectors(KnightPiece.MovementVectors, 1);\n    };\n    KnightPiece.MovementVectors = [[1, 2], [1, -2], [-1, 2], [-1, -2], [2, 1], [2, -1], [-2, 1], [-2, -1]];\n    return KnightPiece;\n}(Piece_1.Piece));\nexports.KnightPiece = KnightPiece;\n;\n\n//# sourceMappingURL=Knight.js.map\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Piece_1 = require(\"../Piece\");\nvar Events_1 = require(\"../Events\");\nvar PawnPiece = /** @class */ (function (_super) {\n    __extends(PawnPiece, _super);\n    function PawnPiece() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.name = \"Pawn\";\n        _this.type = \"P\";\n        _this.enpassant = false;\n        return _this;\n    }\n    PawnPiece.prototype.move = function (square) {\n        var current = this.square;\n        // Set enpassant flag if it was a big move\n        if (Math.abs(current.getPosition().y - square.getPosition().y) > 1) {\n            this.enpassant = true;\n        }\n        else {\n            this.enpassant = false;\n        }\n        if (!_super.prototype.move.call(this, square))\n            return false;\n        // Check if the move was enpassant capture\n        var back = this.square.getSibling(0, (this.color == Piece_1.COLORS.WHITE ? 1 : -1));\n        if (back && back.piece && back.piece.color != this.color && back.piece.enpassant) {\n            this.capture(back);\n        }\n        // Queening\n        var forwardSquare = this.square.getSibling(0, (this.color == Piece_1.COLORS.WHITE ? -1 : 1));\n        if (!forwardSquare) {\n            var newPiece = this.board.createPiece(\"Q\", this.color);\n            newPiece.setSquare(this.square);\n            this.board.onPromote.emit(new Events_1.ChessPromoteEvent(this.square, newPiece, this.board.SquareToFEN(this.square)));\n        }\n        return true;\n    };\n    PawnPiece.prototype.onMoved = function (square) {\n        this.board.addToHistory(\"move\", {\n            lastMoved: this.lastMoved,\n            moves: this.moves,\n            enpassant: this.enpassant,\n            piece: this,\n            from: this.square,\n            to: square\n        });\n    };\n    PawnPiece.prototype.undoMove = function (move) {\n        this.enpassant = move.enpassant;\n        this.lastMoved = move.lastMoved;\n        this.moves = move.moves;\n        this.setSquare(move.from);\n    };\n    PawnPiece.prototype.AfterPieceMoved = function (piece, square) {\n        // If any piece is moved no enpassant moves are allowed\n        // if(piece.color != this.color)\n        // {\n        // \tthis.enpassant = false;\n        // }\n    };\n    PawnPiece.prototype.getMoves = function () {\n        var moves = [];\n        var direction = (this.color == Piece_1.COLORS.WHITE ? -1 : 1);\n        // 1 Forward\n        var square1 = this.square.getSibling(0, direction);\n        if (square1 && !square1.piece) {\n            moves.push(square1);\n        }\n        // 2 Forward (if didn't move yet)\n        var square2 = this.square.getSibling(0, direction * 2);\n        if (square2 && !square2.piece && this.moves == 0 && !square1.piece) {\n            moves.push(square2);\n        }\n        // Capture 1\n        var capture1 = this.square.getSibling(1, direction);\n        if (capture1 && capture1.piece && capture1.piece.color != this.color) {\n            moves.push(capture1);\n        }\n        // Capture 2\n        var capture2 = this.square.getSibling(-1, direction);\n        if (capture2 && capture2.piece && capture2.piece.color != this.color) {\n            moves.push(capture2);\n        }\n        // En passant capture 1\n        var enpassant1 = this.square.getSibling(1, 0);\n        if (enpassant1 && enpassant1.piece && enpassant1.piece.color != this.color && enpassant1.piece.moves == 1 && enpassant1.piece.enpassant) {\n            moves.push(this.square.getSibling(1, direction));\n        }\n        /// En passant capture 2\n        var enpassant2 = this.square.getSibling(-1, 0);\n        if (enpassant2 && enpassant2.piece && enpassant2.piece.color != this.color && enpassant2.piece.moves == 1 && enpassant2.piece.enpassant) {\n            moves.push(this.square.getSibling(-1, direction));\n        }\n        return moves;\n    };\n    return PawnPiece;\n}(Piece_1.Piece));\nexports.PawnPiece = PawnPiece;\n;\n\n//# sourceMappingURL=Pawn.js.map\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Piece_1 = require(\"../Piece\");\nvar QueenPiece = /** @class */ (function (_super) {\n    __extends(QueenPiece, _super);\n    function QueenPiece() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.name = \"Queen\";\n        _this.type = \"Q\";\n        return _this;\n    }\n    QueenPiece.prototype.getMoves = function () {\n        return this.getMovesByVectors(Piece_1.MovementVectors.Omni);\n    };\n    return QueenPiece;\n}(Piece_1.Piece));\nexports.QueenPiece = QueenPiece;\n;\n\n//# sourceMappingURL=Queen.js.map\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Piece_1 = require(\"../Piece\");\nvar RookPiece = /** @class */ (function (_super) {\n    __extends(RookPiece, _super);\n    function RookPiece() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.name = \"Rook\";\n        _this.type = \"R\";\n        return _this;\n    }\n    RookPiece.prototype.getMoves = function () {\n        return this.getMovesByVectors(Piece_1.MovementVectors.Lateral);\n    };\n    return RookPiece;\n}(Piece_1.Piece));\nexports.RookPiece = RookPiece;\n;\n\n//# sourceMappingURL=Rook.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Positions = /** @class */ (function () {\n    function Positions() {\n    }\n    Positions.default = [\n        [\"bR\", \"bN\", \"bB\", \"bQ\", \"bK\", \"bB\", \"bN\", \"bR\"],\n        [\"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\"],\n        [\"wR\", \"wN\", \"wB\", \"wQ\", \"wK\", \"wB\", \"wN\", \"wR\"],\n    ];\n    Positions.castling = [\n        [\"bR\", \"\", \"\", \"\", \"bK\", \"\", \"\", \"bR\"],\n        [\"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\"],\n        [\"wR\", \"\", \"\", \"\", \"wK\", \"\", \"\", \"wR\"],\n    ];\n    Positions.singlePawn = [\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"wP\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    ];\n    Positions.pawnSacrafice = [\n        [\"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\"],\n        [\"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\", \"bP\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\"],\n        [\"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\", \"wP\"],\n    ];\n    Positions.singleQueen = [\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"wQ\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    ];\n    Positions.queenSacrafice = [\n        [\"bQ\", \"bQ\", \"bQ\", \"bQ\", \"bQ\", \"bQ\", \"bQ\", \"bQ\"],\n        [\"bQ\", \"bQ\", \"bQ\", \"bQ\", \"bQ\", \"bQ\", \"bQ\", \"bQ\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"wQ\", \"wQ\", \"wQ\", \"wQ\", \"wQ\", \"wQ\", \"wQ\", \"wQ\"],\n        [\"wQ\", \"wQ\", \"wQ\", \"wQ\", \"wQ\", \"wQ\", \"wQ\", \"wQ\"],\n    ];\n    Positions.singleBishop = [\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"bP\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"bP\", \"wB\", \"bP\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"bP\", \"\", \"\", \"\", \"\"],\n        [\"\", \"bP\", \"\", \"bP\", \"\", \"bP\", \"\", \"bP\"],\n        [\"bP\", \"\", \"bP\", \"\", \"bP\", \"\", \"bP\", \"\"],\n        [\"\", \"bP\", \"\", \"bP\", \"\", \"bP\", \"\", \"bP\"],\n    ];\n    Positions.singleRook = [\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"wR\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    ];\n    Positions.singleKing = [\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"wK\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    ];\n    Positions.singleKnight = [\n        [\"\", \"\", \"bP\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"bP\", \"\", \"bP\", \"\", \"\", \"\", \"\"],\n        [\"\", \"bP\", \"bP\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"wN\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    ];\n    return Positions;\n}());\nexports.Positions = Positions;\n;\n\n//# sourceMappingURL=Positions.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Square = /** @class */ (function () {\n    function Square(board, x, y) {\n        this.piece = null;\n        this.board = null;\n        this.x = -1;\n        this.y = -1;\n        this.board = board;\n        this.x = x;\n        this.y = y;\n    }\n    Square.prototype.setPiece = function (piece) {\n        this.piece = piece;\n    };\n    Square.prototype.getPiece = function () {\n        return this.piece;\n    };\n    Square.prototype.getSibling = function (offsetX, offsetY) {\n        return this.board.getSquare(this.x + offsetX, this.y + offsetY);\n    };\n    Square.prototype.getColor = function () {\n        var xor = function (a, b) { return !a != !b; };\n        return xor(this.x % 2, this.y % 2) ? 'w' : 'b';\n    };\n    Square.prototype.getPosition = function () {\n        return {\n            x: this.x,\n            y: this.y\n        };\n    };\n    Square.prototype.getFENPosition = function () {\n        return this.board.PositionToFEN(this.x, this.y);\n    };\n    return Square;\n}());\nexports.Square = Square;\n\n//# sourceMappingURL=Square.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ChessEvent = /** @class */ (function () {\n    function ChessEvent() {\n        this.messageObject = null;\n        this._defaultPervented = false;\n        this._shouldPropagate = true;\n    }\n    ChessEvent.prototype.preventDefault = function () {\n        this._defaultPervented = true;\n    };\n    ChessEvent.prototype.isPrevented = function () {\n        return this._defaultPervented;\n    };\n    ChessEvent.prototype.trigger = function () {\n        if (this.messageObject) {\n            this.messageObject();\n        }\n    };\n    ChessEvent.prototype.stopPropagation = function () {\n        this._shouldPropagate = false;\n    };\n    ChessEvent.prototype.shouldPropagate = function () {\n        return this._shouldPropagate;\n    };\n    return ChessEvent;\n}());\nexports.ChessEvent = ChessEvent;\n;\nvar ChessEventEmitter = /** @class */ (function () {\n    function ChessEventEmitter() {\n        this.listeners = [];\n    }\n    ChessEventEmitter.prototype.emit = function (event, messageObject) {\n        if (messageObject === void 0) { messageObject = null; }\n        event.messageObject = messageObject;\n        this.listeners.forEach(function (callback) {\n            if (event.shouldPropagate()) {\n                callback(event);\n            }\n        });\n    };\n    ChessEventEmitter.prototype.broadcast = function (messsage) {\n        this.listeners.forEach(function (callback) {\n            callback(event);\n        });\n    };\n    ChessEventEmitter.prototype.on = function (callback) {\n        this.listeners.push(callback);\n    };\n    ChessEventEmitter.prototype.off = function (callback) {\n        this.listeners.splice(this.listeners.indexOf(callback), 1);\n    };\n    return ChessEventEmitter;\n}());\nexports.ChessEventEmitter = ChessEventEmitter;\n;\n\n//# sourceMappingURL=Utils.js.map\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Chessboard\"));\n__export(require(\"./Square\"));\n__export(require(\"./Piece\"));\n__export(require(\"./Positions\"));\n__export(require(\"./Events\"));\n\n//# sourceMappingURL=index.js.map\n","exports.Chess = {\r\n\tChess: require(\"./build/Chess/index.js\"),\r\n\tChessAI: require(\"./build/ChessAI/index.js\"),\r\n};","\r\nfunction reverseArray(array)\r\n{\r\n    return array.slice().reverse();\r\n};\r\n\r\nexport var boardEvalsWhite = {\r\n\tP: [\r\n\t\t[10.0,  10.0,  10.0,  10.0,  10.0,  10.0,  10.0,  10.0],\r\n\t\t[5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0],\r\n\t\t[1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0],\r\n\t\t[0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5],\r\n\t\t[0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0],\r\n\t\t[0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5],\r\n\t\t[0.5,  1.0, 1.0,  -2.0, -2.0,  1.0,  1.0,  0.5],\r\n\t\t[0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0]\r\n\t],\r\n\r\n\tN: [\r\n\t\t[-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0],\r\n\t\t[-4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0],\r\n\t\t[-3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0],\r\n\t\t[-3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0],\r\n\t\t[-3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0],\r\n\t\t[-3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0],\r\n\t\t[-4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0],\r\n\t\t[-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0]\r\n\t\t],\r\n\r\n\tB: [\r\n\t\t[ -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],\r\n\t\t[ -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],\r\n\t\t[ -1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0],\r\n\t\t[ -1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0],\r\n\t\t[ -1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0],\r\n\t\t[ -1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0],\r\n\t\t[ -1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0],\r\n\t\t[ -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0]\r\n\t],\r\n\r\n\r\n\tR: [\r\n\t\t[  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],\r\n\t\t[  0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5],\r\n\t\t[ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\r\n\t\t[ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\r\n\t\t[ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\r\n\t\t[ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\r\n\t\t[ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\r\n\t\t[  0.0,   0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  0.0]\r\n\t],\r\n\r\n\r\n\tQ: [\r\n\t\t[ -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],\r\n\t\t[ -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],\r\n\t\t[ -1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0],\r\n\t\t[ -0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5],\r\n\t\t[  0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5],\r\n\t\t[ -1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0],\r\n\t\t[ -1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0],\r\n\t\t[ -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0]\r\n\t],\r\n\r\n\tK: [\r\n\r\n\t\t[ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\r\n\t\t[ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\r\n\t\t[ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\r\n\t\t[ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\r\n\t\t[ -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0],\r\n\t\t[ -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0],\r\n\t\t[  2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0 ],\r\n\t\t[  2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0 ]\r\n\t]\r\n};\r\n\r\nexport var boardEvalsBlack = {\r\n\tP: reverseArray(boardEvalsWhite.P),\r\n\tN: reverseArray(boardEvalsWhite.N),\r\n\tB: reverseArray(boardEvalsWhite.B),\r\n\tR: reverseArray(boardEvalsWhite.R),\r\n\tQ: reverseArray(boardEvalsWhite.Q),\r\n\tK: reverseArray(boardEvalsWhite.K),\r\n};\r\n\r\nexport var BoardEvaluations = [\r\n\tboardEvalsBlack,\r\n\tboardEvalsWhite,\r\n];","import { Chessboard, Positions, COLORS } from \"@chesslib/core\";\r\nimport { BoardEvaluations } from \"./BoardEvals\";\r\n\r\nconst PIECE_VALUES = {\r\n\tP: 10,\r\n\tB: 30,\r\n\tN: 30,\r\n\tR: 50,\r\n\tQ: 80,\r\n\tK: 900,\r\n};\r\n\r\nexport class ChessAI\r\n{\r\n\tchessboard:Chessboard = null;\r\n\r\n\tmoves = [];\r\n\tplayingSide = 0;\r\n\tplayerCount = 2;\r\n\tsearchTime = 0;\r\n\r\n\tconstructor(chessboard, playingSide, playerCount)\r\n\t{\r\n\t\tthis.chessboard = chessboard;\r\n\t\tthis.playingSide = playingSide;\r\n\t\tthis.playerCount = playerCount;\r\n\t}\r\n\r\n\tsetBoard(chessboard)\r\n\t{\r\n\t\tthis.chessboard = chessboard;\r\n\t}\r\n\r\n\tloadBoard(positions)\r\n\t{\r\n\t\tthis.chessboard = Chessboard.fromPosition(positions);\r\n\t}\r\n\r\n\tdoMove(move)\r\n\t{\r\n\t\tif(!this.chessboard.doMove(move))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tdoMoveFEN(move)\r\n\t{\r\n\t\tif(!this.chessboard.doMoveFEN(move))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tmakeMoves(searchDepth=4, amount = 1)\r\n\t{\r\n\t\tvar bestMoves = this.getBestMoves(searchDepth, amount);\r\n\t\tif(!bestMoves.length)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tfor(var bestMove of bestMoves)\r\n\t\t{\r\n\t\t\tthis.doMove(bestMove);\r\n\t\t}\r\n\t\treturn bestMoves;\r\n\t}\r\n\r\n\tgetBestMove(side, searchDepth)\r\n\t{\r\n\t\t\r\n\t\tvar bestMoves = this.getBestMoves(searchDepth);\r\n\r\n\t\tif(!bestMoves.length)\r\n\t\t{\r\n\t\t \treturn this.getRandomMove();\r\n\t\t}\r\n\t\t\r\n\t\t// var bestMove = null;\r\n\t\t// var bestValue = -9999;\r\n\t\t// if(move.score > bestValue)\r\n\t\t// {\r\n\t\t// \tbestMove = move;\r\n\t\t// \tbestValue = move.score;\r\n\t\t// }\r\n\t\t\r\n\t\treturn bestMoves[0];\r\n\t}\r\n\r\n\tgetBestMoves(searchDepth, limit=5)\r\n\t{\r\n\t\tthis.searchTime = Date.now() + 100;\r\n\t\tvar moves = this.chessboard.getMovesFEN(this.playingSide);\r\n\t\t\r\n\t\tfor(let move of moves)\r\n\t\t{\r\n\t\t\tthis.chessboard.moveFEN(move.from, move.to);\r\n\t\t\t\r\n\t\t\t// Do not allow the king to be killed?\r\n\t\t\tmove.score = this.evaluateBestMove(this.playingSide, searchDepth - 1, -10000, 10000, false);\r\n\t\t\tthis.chessboard.undo();\r\n\r\n\t\t}\r\n\r\n\t\treturn moves.sort( (a, b) => {\r\n\t\t\tif(a.score < b.score)\r\n\t\t\t\treturn 1;\r\n\t\t\tif(a.score > b.score)\r\n\t\t\t\treturn -1;\r\n\t\t\treturn 0;\r\n\t\t}).slice(0, limit);\r\n\t}\r\n\t\r\n\tgetNextPlayerSide(playerSide)\r\n\t{\r\n\t\treturn (playerSide + 1) % this.playerCount;\r\n\t}\r\n\r\n\tevaluateBestMove(playerSide, depth, alpha, beta, isMaximisingPlayer)\r\n\t{\r\n\t\tif (depth === 0)\r\n\t\t{\r\n\t\t\treturn this.evaluateBoard(this.playingSide);\r\n\t\t}\r\n\t\tvar currentPlayer = this.getNextPlayerSide(playerSide);\r\n\t\tvar moves = this.chessboard.getMoves(currentPlayer);\r\n\r\n\t\tif (isMaximisingPlayer)\r\n\t\t{\r\n\t\t\tvar bestValue = -9999;\r\n\t\t\tfor (let move of moves)\r\n\t\t\t{\r\n\t\t\t\tthis.chessboard.move(move.from, move.to);\r\n\t\t\t\tbestValue = Math.max(bestValue, this.evaluateBestMove(currentPlayer, depth - 1, alpha, beta, !isMaximisingPlayer));\r\n\t\t\t\tthis.chessboard.undo();\r\n\t\t\t\talpha = Math.max(alpha, bestValue);\r\n\t\t\t\tif (beta <= alpha)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn bestValue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn bestValue;\r\n\t\t} else {\r\n\t\t\tvar bestValue = 9999;\r\n\t\t\tfor (let move of moves)\r\n\t\t\t{\r\n\t\t\t\tthis.chessboard.move(move.from, move.to);\r\n\t\t\t\tbestValue = Math.min(bestValue, this.evaluateBestMove(currentPlayer, depth - 1, alpha, beta, !isMaximisingPlayer));\r\n\t\t\t\tthis.chessboard.undo();\r\n\t\t\t\t\r\n\t\t\t\tbeta = Math.min(beta, bestValue);\r\n\t\t\t\tif (beta <= alpha)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn bestValue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn bestValue;\r\n\t\t}\r\n\t}\r\n\r\n\tgetRandomMove()\r\n\t{\r\n\t\tvar moves = this.chessboard.getMovesFEN(this.playingSide);\r\n\t\tif(!moves.length)\r\n\t\t\treturn null;\r\n\t\tvar randMove = moves[Math.floor(Math.random() * moves.length)];\r\n\t\trandMove.score = 0;\r\n\t\treturn randMove;\r\n\t}\r\n\r\n\tevaluateBoard(side)\r\n\t{\r\n\t\tvar boardValue = 0;\r\n\t\tthis.chessboard.forEachPiece( piece => {\r\n\t\t\tif(side == piece.color)\r\n\t\t\t{\r\n\t\t\t\tboardValue += PIECE_VALUES[piece.type] + BoardEvaluations[piece.color][piece.type][piece.square.y][piece.square.x];\r\n\t\t\t}else{\r\n\t\t\t\tboardValue -= PIECE_VALUES[piece.type] + BoardEvaluations[piece.color][piece.type][piece.square.y][piece.square.x];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\treturn boardValue;\r\n\t}\r\n\t\r\n};","export class ChessAIWorker\r\n{\r\n\tworker: Worker = null;\r\n\t\r\n\tlisteners = [];\r\n\tconstructor(workerPath)\r\n\t{\r\n\t\tthis.worker = new Worker( workerPath );\r\n\t\tthis.worker.onmessage = (message) => {\r\n\t\t\t\r\n\t\t\tif(this.listeners[message.data.event])\r\n\t\t\t{\r\n\t\t\t\tfor(var event of this.listeners[message.data.event])\r\n\t\t\t\t{\r\n\t\t\t\t\tevent.apply(event, message.data.arguments);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\temit(event, data)\r\n\t{\r\n\t\tthis.worker.postMessage(event);\r\n\t}\r\n\t\r\n\ton(type, callback)\r\n\t{\r\n\t\tif(!this.listeners[type])\r\n\t\t{\r\n\t\t\tthis.listeners[type] = [];\r\n\t\t}\r\n\r\n\t\tthis.listeners[type].push(callback);\r\n\t}\r\n\t\r\n\texec(method, ...args: any[])\r\n\t{\r\n\t\tthis.worker.postMessage({\r\n\t\t\tmethod: method,\r\n\t\t\targuments: Array.prototype.slice.call(arguments).slice(1)\r\n\t\t});\r\n\t}\r\n\r\n\tdestroy()\r\n\t{\r\n\t\tthis.worker.terminate();\r\n\t}\r\n};\r\n\r\n","export * from \"./ChessAI\";\r\nexport * from \"./ChessAIWorker\";","import * as ChessAI from \"./ChessAI\";\r\n\r\ndeclare let window:any;\r\nwindow.ChessAI = ChessAI;\r\n\r\nexport * from \"./ChessAI\";\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}